//参考 https://github.com/goodeggs/mongoose-lean

// Generated by CoffeeScript 1.8.0
var __slice = [].slice;

module.exports = function(mongoose) {
    var method, setOptionsWithLean, setOptionsWithoutLean, _fn, _i, _len, _ref;
    _ref = ['find', 'findOne', 'exec'];
    _fn = function() {
        var oldMethod;
        oldMethod = mongoose.Query.prototype[method];
        return mongoose.Query.prototype[method] = function() {
            var args, cb;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (!this._mongooseOptions.lean) {
                return oldMethod.call.apply(oldMethod, [this].concat(__slice.call(args)));
            }
            cb = args.pop();
            if (typeof cb !== 'function') {
                args.push(cb);
                return oldMethod.apply(this, args);
            } else {
                return oldMethod.call.apply(oldMethod, [this].concat(__slice.call(args), [function(err, docs) {
                    var doc, _j, _len1, _ref1;
                    if (Array.isArray(docs)) {
                        for (_j = 0, _len1 = docs.length; _j < _len1; _j++) {
                            doc = docs[_j];
                            if (doc.id == null) {
                                // doc.id = (_ref1 = doc._id) != null ? _ref1.toString() : void 0;
                            }
                            if (doc.__v !== undefined){
                                delete doc.__v;
                            }
                        }
                    } else if ((docs != null ? docs._id : void 0) != null) {
                        if (docs.id == null) {
                            // docs.id = docs._id.toString();
                        }
                        if (docs.__v !== undefined){
                            delete docs.__v;
                        }
                    }
                    return typeof cb === "function" ? cb(err, docs) : void 0;
                }]));
            }
        };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn();
    }
    setOptionsWithoutLean = mongoose.Query.prototype.setOptions;
    setOptionsWithLean = function() {
        var args, _base;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        setOptionsWithoutLean.apply(this, args);
        if ((_base = this._mongooseOptions).lean == null) {
            _base.lean = true;
        }
        return this;
    };
    mongoose.Query.prototype.setOptions = setOptionsWithLean;
    return mongoose.Query.prototype.fat = function() {
        this.lean(false);
        return this;
    };
};
